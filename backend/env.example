# ============================================================================
# CodeDocs AI - Backend Environment Configuration
# ============================================================================
#
# SETUP INSTRUCTIONS:
# 1. Copy this file to .env:
#    cp env.example .env
#
# 2. Fill in ALL required values below
#
# 3. Never commit .env to version control (it's in .gitignore)
#
# 4. Run setup script to verify configuration:
#    python setup.py
#
# 5. Start the server:
#    python app.py
#
# ============================================================================


# ----------------------------------------------------------------------------
# FLASK CONFIGURATION
# ----------------------------------------------------------------------------

# Flask Environment (Required)
# Options: development, production
# Use 'development' for local development with debug mode enabled
FLASK_ENV=development

# Flask Secret Key (Required)
# Used for session management and security features
# GENERATE: Run `python -c "import secrets; print(secrets.token_hex(32))"`
# IMPORTANT: Use a strong, random value in production
SECRET_KEY=your-secret-key-change-in-production-use-random-string

# Frontend URL (Required for CORS)
# For local development, use http://localhost:3000
# For production, add your deployed frontend URL
FRONTEND_URL=http://localhost:3000


# ----------------------------------------------------------------------------
# DATABASE CONFIGURATION (Required)
# ----------------------------------------------------------------------------

# PostgreSQL Database URL with pgvector extension
# Format: postgresql://username:password@host:port/database
#
# WHERE TO GET:
# Option 1 - Supabase (Recommended - has pgvector pre-installed):
#   1. Go to https://supabase.com
#   2. Create a new project
#   3. Go to Project Settings → Database
#   4. Copy "Connection string" under "Connection pooling"
#   5. Replace [YOUR-PASSWORD] with your database password
#
# Option 2 - Self-hosted PostgreSQL:
#   1. Install PostgreSQL 12+
#   2. Install pgvector extension: https://github.com/pgvector/pgvector
#   3. Create a database
#   4. Use format: postgresql://user:password@localhost:5432/codedocs_db
#
# EXAMPLE:
# DATABASE_URL=postgresql://postgres:password@db.xxxxx.supabase.co:5432/postgres
DATABASE_URL=postgresql://username:password@host:5432/database


# ----------------------------------------------------------------------------
# AWS S3 CONFIGURATION (Required)
# ----------------------------------------------------------------------------

# AWS Access Key ID
# WHERE TO GET:
#   1. Go to AWS Console → IAM → Users
#   2. Select your user or create new one
#   3. Go to "Security credentials" tab
#   4. Click "Create access key"
#   5. Save the Access Key ID and Secret Access Key
#
# PERMISSIONS NEEDED:
#   - s3:PutObject (upload files)
#   - s3:GetObject (read files)
#   - s3:DeleteObject (delete files)
#   - s3:ListBucket (list files)
AWS_ACCESS_KEY_ID=your-aws-access-key-id

# AWS Secret Access Key
# This is shown only once when you create the access key - save it securely
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key

# AWS Region
# The region where your S3 bucket is located
# Common options: us-east-1, us-west-2, eu-west-1, ap-southeast-1
# WHERE TO FIND: AWS Console → S3 → Your bucket → Properties → Region
AWS_REGION=us-east-1

# S3 Bucket Name
# The name of your S3 bucket for storing uploaded code files
#
# HOW TO CREATE:
#   1. Go to AWS Console → S3
#   2. Click "Create bucket"
#   3. Enter a unique name (e.g., codedocs-ai-files-yourusername)
#   4. Select your region
#   5. Keep "Block all public access" enabled (for security)
#   6. Create bucket
S3_BUCKET_NAME=your-s3-bucket-name


# ----------------------------------------------------------------------------
# CLAUDE API (Anthropic) - Required
# ----------------------------------------------------------------------------

# Claude API Key for AI-powered code analysis
#
# WHERE TO GET:
#   1. Go to https://console.anthropic.com/
#   2. Sign up or log in
#   3. Go to "API Keys" section
#   4. Click "Create Key"
#   5. Copy the key (starts with "sk-ant-")
#   6. Note: You'll need credits/billing set up
#
# PRICING INFO (as of 2024):
#   - Claude 3.5 Sonnet: ~$3 per million input tokens
#   - Check current pricing: https://www.anthropic.com/pricing
#
# USAGE:
#   - Documentation generation
#   - Security vulnerability detection
#   - Code quality analysis
#   - RAG-powered chat responses
CLAUDE_API_KEY=sk-ant-your-claude-api-key-here


# ----------------------------------------------------------------------------
# OPENAI API - Required (for Embeddings)
# ----------------------------------------------------------------------------

# OpenAI API Key for creating vector embeddings (RAG system)
#
# WHERE TO GET:
#   1. Go to https://platform.openai.com/
#   2. Sign up or log in
#   3. Go to "API keys" section
#   4. Click "Create new secret key"
#   5. Copy the key (starts with "sk-")
#   6. Note: Requires payment method on file
#
# PRICING INFO (as of 2024):
#   - text-embedding-3-small: ~$0.02 per 1M tokens
#   - Check current pricing: https://openai.com/pricing
#
# USAGE:
#   - Creating embeddings for code files and documentation
#   - Enabling semantic search in RAG system
OPENAI_API_KEY=sk-your-openai-api-key-here


# ----------------------------------------------------------------------------
# JWT CONFIGURATION
# ----------------------------------------------------------------------------

# JWT Secret Key (Optional - uses SECRET_KEY if not set)
# Used for signing JWT authentication tokens
# GENERATE: Run `python -c "import secrets; print(secrets.token_hex(32))"`
# IMPORTANT: Use a different key from SECRET_KEY in production
JWT_SECRET_KEY=your-jwt-secret-key-different-from-secret-key

# JWT Token Expiration (Optional - default: 24 hours)
# How long JWT tokens remain valid (in hours)
# Recommended: 24 for development, 1-8 for production
JWT_EXPIRATION_HOURS=24


# ----------------------------------------------------------------------------
# CORS CONFIGURATION
# ----------------------------------------------------------------------------

# Frontend URL for CORS (Required for development)
# The URL where your Next.js frontend is running
# Development: http://localhost:3000
# Production: Add your deployed frontend URL
FRONTEND_URL=http://localhost:3000

# Production Frontend URL (Optional)
# Add this for production deployment (e.g., Vercel URL)
# Example: https://codedocs-ai.vercel.app
# Leave empty for development
FRONTEND_URL_PROD=


# ----------------------------------------------------------------------------
# REDIS CONFIGURATION (Optional - for background tasks)
# ----------------------------------------------------------------------------

# Redis URL (Optional - only needed if using Celery for background tasks)
# Currently, the app uses threading for background processing
# This can be used for future scaling with Celery
#
# WHERE TO GET:
#   Option 1 - Local Redis:
#     1. Install Redis: https://redis.io/download
#     2. Start Redis: redis-server
#     3. Use: redis://localhost:6379/0
#
#   Option 2 - Redis Cloud:
#     1. Go to https://redis.com/try-free/
#     2. Create free account and database
#     3. Copy connection URL
#
# REDIS_URL=redis://localhost:6379/0


# ============================================================================
# VERIFICATION CHECKLIST
# ============================================================================
#
# Before running the application, ensure you have:
#
# [REQUIRED - App won't start without these]
# [ ] DATABASE_URL - PostgreSQL with pgvector
# [ ] AWS_ACCESS_KEY_ID - AWS credentials
# [ ] AWS_SECRET_ACCESS_KEY - AWS credentials
# [ ] S3_BUCKET_NAME - Existing S3 bucket
# [ ] CLAUDE_API_KEY - Anthropic API key
# [ ] OPENAI_API_KEY - OpenAI API key
#
# [RECOMMENDED - For security and functionality]
# [ ] SECRET_KEY - Strong random string
# [ ] JWT_SECRET_KEY - Different from SECRET_KEY
# [ ] FRONTEND_URL - Matches your frontend URL
#
# [OPTIONAL - For specific features]
# [ ] FLASK_ENV - Set to 'production' for deployment
# [ ] FRONTEND_URL_PROD - Your production URL
# [ ] REDIS_URL - If using Celery
#
# ============================================================================


# ============================================================================
# TESTING YOUR CONFIGURATION
# ============================================================================
#
# 1. Verify environment variables are loaded:
#    python -c "from config.settings import Config; Config.validate_config()"
#
# 2. Test database connection:
#    python -c "from config.database import test_db_connection; test_db_connection()"
#
# 3. Run setup script to test all services:
#    python setup.py
#
# 4. Start the server:
#    python app.py
#
# 5. Test health endpoint:
#    curl http://localhost:5000/health
#
# ============================================================================


# ============================================================================
# TROUBLESHOOTING
# ============================================================================
#
# DATABASE CONNECTION ISSUES:
#   - Verify DATABASE_URL format is correct
#   - Check PostgreSQL is running and accessible
#   - Ensure pgvector extension is installed
#   - For Supabase, use connection pooling URL
#
# S3 UPLOAD FAILURES:
#   - Verify AWS credentials are correct
#   - Check S3 bucket exists and is in correct region
#   - Ensure IAM user has required S3 permissions
#   - Check bucket name doesn't have typos
#
# CLAUDE API ERRORS:
#   - Verify API key starts with "sk-ant-"
#   - Check you have credits/billing set up
#   - Ensure API key hasn't been revoked
#   - Check rate limits aren't exceeded
#
# OPENAI API ERRORS:
#   - Verify API key starts with "sk-"
#   - Check you have payment method on file
#   - Ensure API key hasn't been revoked
#   - Check usage limits aren't exceeded
#
# CORS ERRORS:
#   - Ensure FRONTEND_URL matches your frontend exactly
#   - Check frontend is actually running on that URL
#   - Verify no trailing slashes in URLs
#
# ============================================================================


# ============================================================================
# SECURITY BEST PRACTICES
# ============================================================================
#
# 1. NEVER commit .env file to version control
# 2. Use strong, random values for SECRET_KEY and JWT_SECRET_KEY
# 3. Use different keys for development and production
# 4. Rotate API keys regularly
# 5. Set appropriate IAM permissions (least privilege)
# 6. Use HTTPS in production (not HTTP)
# 7. Set FLASK_ENV=production in production
# 8. Keep backup of environment variables securely
# 9. Use environment-specific values (dev/staging/prod)
# 10. Regularly audit and update dependencies
#
# ============================================================================


# ============================================================================
# PRODUCTION DEPLOYMENT CHECKLIST
# ============================================================================
#
# [ ] Set FLASK_ENV=production
# [ ] Use strong SECRET_KEY and JWT_SECRET_KEY (different from each other)
# [ ] Add production FRONTEND_URL_PROD
# [ ] Use HTTPS URLs for all external services
# [ ] Verify database has pgvector extension
# [ ] Set up database backups
# [ ] Configure proper S3 bucket policies
# [ ] Set up monitoring and logging
# [ ] Use environment variables manager (AWS Secrets Manager, etc.)
# [ ] Test all API endpoints in production environment
# [ ] Set up SSL/TLS certificates
# [ ] Configure firewall rules
# [ ] Set up rate limiting
#
# ============================================================================


# ============================================================================
# COST ESTIMATES (Approximate, as of 2024)
# ============================================================================
#
# PostgreSQL (Supabase):
#   - Free tier: 500 MB database, 2 GB transfer
#   - Pro: $25/month (8 GB database, 250 GB transfer)
#
# AWS S3:
#   - Free tier: 5 GB storage, 20,000 GET requests
#   - After: ~$0.023/GB/month, $0.0004 per 1,000 requests
#
# Claude API:
#   - Claude 3.5 Sonnet: ~$3 per million input tokens
#   - Typical project: $0.10 - $0.50 per project analyzed
#
# OpenAI Embeddings:
#   - text-embedding-3-small: ~$0.02 per million tokens
#   - Typical project: $0.01 - $0.10 per project indexed
#
# Expected costs for 100 projects/month: $50-100
#
# ============================================================================

# END OF CONFIGURATION FILE

